704. Binary Search
int low=0;
        int high=nums.length-1;
        int mid;
        while(low<=high){
            mid=(low+high)/2;
            if(nums[mid]==target){
                return mid;
            }else if(nums[mid]<target){
                low=mid+1;
            }else{
                high=mid-1;
            }
        }
        return -1;



Move All Zeros to end of Array (Asked in Ninjacart)


    void pushZerosToEnd(int[] arr, int n) {
        // code here
       int j=0;
        for(int i=0;i<n;i++){
            if(arr[i]!=0){
              int temp=arr[i];
              arr[i]=arr[j];
              arr[j]=temp;
              j++;
            }
            
        }
            
        
        
    }



Two Sum 


class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer,Integer> map=new HashMap();
       
        for(int i=0;i<nums.length;i++){
            int rem=target-nums[i];
            if(map.containsKey(rem)){
                return new int []{i,map.get(rem)};
            }else{
                map.put(nums[i],i);
            }
        }
        return new int[]{0,0};
    }
}


find a element in pivoted sorted array
33. Search in Rotated Sorted Array
class Solution {
    public int search(int[] nums, int target) {
        int low=0;
        int high=nums.length-1;
        int mid;
        while(low<=high){
          mid=(low+high)/2;
          if(nums[mid]==target){
              return mid;
          }else if(nums[low]<=nums[mid]){
              if(nums[low]<=target && target<=nums[mid]){
                  high=mid-1;
              }else low=mid+1;
          }else{
              if(nums[mid]<=target && target<=nums[high]){
                  low=mid+1;
              }else high=mid-1;
          }
        }
        return -1;
    }
}


182. Duplicate Emails
# Write your MySQL query statement below
select c.name  as Customers from Customers as c where c.id not in(select Orders.customerId from Orders);



183. Customers Who Never Order
# Write your MySQL query statement below
select c.name  as Customers from Customers as c where c.id not in(select Orders.customerId from Orders);

912. Sort an Array

    private void merge(int[] nums,int low, int mid, int high){
        int n = mid-low+1, m = high - mid;
        int[] left = new int[n];
        int[] right = new int[m];
        
        int i =0,j=0;
        for(i=0;i<n;i++)
            left[i] = nums[low+i];
        
        for(i=0;i<m;i++)
            right[i] = nums[i+mid+1];
        
        i=0;
        j=0;
        int k = low;
        while(i<n && j<m){
            if(left[i]<right[j])
                nums[k++] = left[i++];
            else
                nums[k++] = right[j++];
        }
        
        while(i<n)
            nums[k++] = left[i++];
        
        while(j<m)
            nums[k++] = right[j++];
        
    }
    
    private void sort(int[] nums, int low, int high ){
        if(low<high){
            int mid = low + ((high - low) / 2 );
            
            sort(nums,low,mid);
            sort(nums,mid+1,high);
            
            merge(nums, low, mid, high);
        }
    }
    
    public int[] sortArray(int[] nums) {
        sort(nums,0,nums.length-1);
        return nums;





141. Linked List Cycle
/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public boolean hasCycle(ListNode head) {
       if(head==null || head.next==null){
            return false;
        }
      ListNode turtle=head;
      ListNode hare=head;

      while(hare.next!=null && hare.next.next!=null){
          hare=hare.next.next;
          turtle=turtle.next;
          
          if(turtle==hare){
              return true;
          }
      }
      return false;
      
        
    }
}


143. Reorder List

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    ListNode moddle(ListNode head){
        ListNode slow=head;
        ListNode fast=head;
        while(fast.next !=null && fast.next.next !=null){
            slow=slow.next;
            fast=fast.next.next;
        }
        return slow;
    }
    ListNode reveserlist(ListNode head){
        ListNode prev=null;
        ListNode curr=head;
        while(curr!=null){
            ListNode next=curr.next;
            curr.next=prev;

            //updataion
            prev = curr;
            curr = next;
        }
        return prev;
    }
    public void reorderList(ListNode head) {
        ListNode middle=moddle(head);
        ListNode reverse=reveserlist(middle.next);
        middle.next=null;
        ListNode firsthead=head;
        ListNode second=reverse;
        while(second!=null){
            ListNode temp1=firsthead.next;
            ListNode temp2=second.next;
            firsthead.next=second;
            second.next=temp1;
            firsthead=temp1;
            second=temp2;
        }
    }
}

33. Search in Rotated Sorted Array
class Solution {
    public int search(int[] nums, int target) {
        int low=0;
        int high=nums.length-1;
        int mid;
        while(low<=high){
          mid=(low+high)/2;
          if(nums[mid]==target){
              return mid;
          }else if(nums[low]<=nums[mid]){
              if(nums[low]<=target && target<=nums[mid]){
                  high=mid-1;
              }else low=mid+1;
          }else{
              if(nums[mid]<=target && target<=nums[high]){
                  low=mid+1;
              }else high=mid-1;
          }
        }
        return -1;
    }
}


1021. Remove Outermost Parentheses

class Solution {
    public String removeOuterParentheses(String s) {
         int len = s.length();
        if (len <= 2) return "";
        char[] c = s.toCharArray();
        StringBuilder newString = new StringBuilder();
        int open = 1;
        int openLeft = 0;
        for (int i = 1; i < len; i++) {
            if (c[i] == '(') {
                open++;
                if (open > 1) newString.append('(');
            }
            else {
                if (open > 1) newString.append(')');
                open--;
            }
        }
        return newString.toString();
    }
}
