704. Binary Search
int low=0;
        int high=nums.length-1;
        int mid;
        while(low<=high){
            mid=(low+high)/2;
            if(nums[mid]==target){
                return mid;
            }else if(nums[mid]<target){
                low=mid+1;
            }else{
                high=mid-1;
            }
        }
        return -1;



Move All Zeros to end of Array (Asked in Ninjacart)


    void pushZerosToEnd(int[] arr, int n) {
        // code here
       int j=0;
        for(int i=0;i<n;i++){
            if(arr[i]!=0){
              int temp=arr[i];
              arr[i]=arr[j];
              arr[j]=temp;
              j++;
            }
            
        }
            
        
        
    }



Two Sum 


class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer,Integer> map=new HashMap();
       
        for(int i=0;i<nums.length;i++){
            int rem=target-nums[i];
            if(map.containsKey(rem)){
                return new int []{i,map.get(rem)};
            }else{
                map.put(nums[i],i);
            }
        }
        return new int[]{0,0};
    }
}


find a element in pivoted sorted array
33. Search in Rotated Sorted Array
class Solution {
    public int search(int[] nums, int target) {
        int low=0;
        int high=nums.length-1;
        int mid;
        while(low<=high){
          mid=(low+high)/2;
          if(nums[mid]==target){
              return mid;
          }else if(nums[low]<=nums[mid]){
              if(nums[low]<=target && target<=nums[mid]){
                  high=mid-1;
              }else low=mid+1;
          }else{
              if(nums[mid]<=target && target<=nums[high]){
                  low=mid+1;
              }else high=mid-1;
          }
        }
        return -1;
    }
}


182. Duplicate Emails
# Write your MySQL query statement below
select c.name  as Customers from Customers as c where c.id not in(select Orders.customerId from Orders);



183. Customers Who Never Order
# Write your MySQL query statement below
select c.name  as Customers from Customers as c where c.id not in(select Orders.customerId from Orders);

912. Sort an Array

    private void merge(int[] nums,int low, int mid, int high){
        int n = mid-low+1, m = high - mid;
        int[] left = new int[n];
        int[] right = new int[m];
        
        int i =0,j=0;
        for(i=0;i<n;i++)
            left[i] = nums[low+i];
        
        for(i=0;i<m;i++)
            right[i] = nums[i+mid+1];
        
        i=0;
        j=0;
        int k = low;
        while(i<n && j<m){
            if(left[i]<right[j])
                nums[k++] = left[i++];
            else
                nums[k++] = right[j++];
        }
        
        while(i<n)
            nums[k++] = left[i++];
        
        while(j<m)
            nums[k++] = right[j++];
        
    }
    
    private void sort(int[] nums, int low, int high ){
        if(low<high){
            int mid = low + ((high - low) / 2 );
            
            sort(nums,low,mid);
            sort(nums,mid+1,high);
            
            merge(nums, low, mid, high);
        }
    }
    
    public int[] sortArray(int[] nums) {
        sort(nums,0,nums.length-1);
        return nums;
